name: Carbon Crunch Code Quality Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.js'
      - '**.jsx'
      - '**.py'
  push:
    branches: [main, master]
    paths:
      - '**.js'
      - '**.jsx'
      - '**.py'

jobs:
  analyze-code:
    name: Analyze Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Create minimal requirements for the analyzer if backend/requirements.txt doesn't exist
          if [ ! -f "backend/requirements.txt" ]; then
            mkdir -p backend
            echo "fastapi<2.0.0" > backend/requirements.txt
            echo "pydantic<2.0.0" >> backend/requirements.txt
          fi
          pip install -r backend/requirements.txt
          
      - name: Create analyzer modules
        run: |
          mkdir -p backend/app/analyzers
          
          # Create __init__.py
          cat > backend/app/analyzers/__init__.py << 'EOF'
from .javascript_analyzer import analyze_javascript
from .python_analyzer import analyze_python
EOF
          
          # Create the JavaScript analyzer
          cat > backend/app/analyzers/javascript_analyzer.py << 'EOF'
def analyze_javascript(file_path):
    """Analyze JavaScript code for quality issues."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            code = file.read()
            
        # Very simple analysis for demonstration
        breakdown = {
            "naming": 0,
            "modularity": 0,
            "comments": 0,
            "formatting": 0,
            "reusability": 0,
            "best_practices": 0
        }
        
        recommendations = []
        
        # Check naming conventions (look for short variable names)
        if any(var in code for var in [' i ', ' j ', ' k ', ' x ', ' y ', ' z ']):
            breakdown["naming"] = 5
            recommendations.append("Use descriptive variable names instead of single letters.")
        else:
            breakdown["naming"] = 8
            
        # Check for single letter function names
        if "function f(" in code or "function a(" in code:
            breakdown["naming"] = 3
            recommendations.append("Rename functions to be descriptive of their purpose.")
            
        # Check for missing semicolons (simple check)
        if '}' in code and '};' not in code:
            breakdown["formatting"] = 8
            recommendations.append("Use consistent semicolons at the end of statements.")
        else:
            breakdown["formatting"] = 12
            
        # Check comments (very simple)
        comments_count = code.count('//') + code.count('/*')
        if comments_count < 3:
            breakdown["comments"] = 10
            recommendations.append("Add more comments to explain complex logic.")
        else:
            breakdown["comments"] = 15
            
        # Check for nested conditionals
        if_count = code.count('if')
        if if_count > 5:
            breakdown["modularity"] = 10
            breakdown["best_practices"] = 10
            recommendations.append("Reduce nested conditionals by extracting logic into separate functions.")
        else:
            breakdown["modularity"] = 15
            breakdown["best_practices"] = 15
            
        # Check for hardcoded values
        if '= 0;' in code or '= 1;' in code or '= 2;' in code:
            breakdown["best_practices"] = 10
            recommendations.append("Replace magic numbers with named constants.")
        
        # Check for duplicate code patterns (very simplified)
        if code.count('return {') > 3:
            breakdown["reusability"] = 8
            recommendations.append("Extract repeated code patterns into reusable functions.")
        else:
            breakdown["reusability"] = 12
            
        # Calculate overall score (simple weighted average)
        overall_score = (
            breakdown["naming"] + 
            breakdown["modularity"] + 
            breakdown["comments"] + 
            breakdown["formatting"] + 
            breakdown["reusability"] + 
            breakdown["best_practices"]
        )
        
        # Ensure we have at least one recommendation
        if not recommendations:
            recommendations.append("The code looks relatively clean, but could benefit from more documentation.")
        
        return {
            "overall_score": overall_score,
            "breakdown": breakdown,
            "recommendations": recommendations
        }
    except Exception as e:
        return {
            "overall_score": 50,
            "breakdown": {
                "naming": 5,
                "modularity": 10,
                "comments": 10,
                "formatting": 5,
                "reusability": 10,
                "best_practices": 10
            },
            "recommendations": [
                f"Error analyzing file: {str(e)}",
                "Ensure proper syntax and formatting in your code."
            ]
        }
EOF
          
          # Create the Python analyzer
          cat > backend/app/analyzers/python_analyzer.py << 'EOF'
def analyze_python(file_path):
    """Analyze Python code for quality issues."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            code = file.read()
            
        # Very simple analysis for demonstration
        breakdown = {
            "naming": 0,
            "modularity": 0,
            "comments": 0,
            "formatting": 0,
            "reusability": 0,
            "best_practices": 0
        }
        
        recommendations = []
        
        # Check naming conventions (look for short variable names)
        if any(var in code for var in [' l ', ' i ', ' j ', ' k ', ' x ', ' y ', ' z ']):
            breakdown["naming"] = 5
            recommendations.append("Use descriptive variable names instead of single letters.")
        else:
            breakdown["naming"] = 8
            
        # Check for single letter function names
        if "def f(" in code or "def a(" in code:
            breakdown["naming"] = 3
            recommendations.append("Rename functions to be descriptive of their purpose.")
            
        # Check indentation (simple check)
        if "    " in code and "  " in code:
            breakdown["formatting"] = 8
            recommendations.append("Use consistent indentation (4 spaces recommended).")
        else:
            breakdown["formatting"] = 12
            
        # Check comments and docstrings
        docstring_count = code.count('"""') + code.count("'''")
        if docstring_count < 2:
            breakdown["comments"] = 10
            recommendations.append("Add docstrings to functions to document their purpose and parameters.")
        else:
            breakdown["comments"] = 15
            
        # Check for too many conditionals
        if_count = code.count('if')
        if if_count > 5:
            breakdown["modularity"] = 10
            breakdown["best_practices"] = 10
            recommendations.append("Reduce nested conditionals by extracting logic into separate functions.")
        else:
            breakdown["modularity"] = 15
            breakdown["best_practices"] = 15
            
        # Check for hardcoded values
        if '= 0' in code or '= 1' in code or '= 2' in code:
            breakdown["best_practices"] = 8
            recommendations.append("Replace magic numbers with named constants.")
        
        # Check for import statements in the middle of the code
        if 'import' in code and not code.strip().startswith('import'):
            breakdown["best_practices"] = 5
            recommendations.append("Move all import statements to the top of the file.")
        
        # Check for duplicate code patterns (very simplified)
        if code.count('return {') > 3:
            breakdown["reusability"] = 8
            recommendations.append("Extract repeated code patterns into reusable functions.")
        else:
            breakdown["reusability"] = 12
            
        # Calculate overall score (simple weighted average)
        overall_score = (
            breakdown["naming"] + 
            breakdown["modularity"] + 
            breakdown["comments"] + 
            breakdown["formatting"] + 
            breakdown["reusability"] + 
            breakdown["best_practices"]
        )
        
        # Ensure we have at least one recommendation
        if not recommendations:
            recommendations.append("The code looks relatively clean, but could benefit from more documentation.")
        
        return {
            "overall_score": overall_score,
            "breakdown": breakdown,
            "recommendations": recommendations
        }
    except Exception as e:
        return {
            "overall_score": 50,
            "breakdown": {
                "naming": 5,
                "modularity": 10,
                "comments": 10,
                "formatting": 5,
                "reusability": 10,
                "best_practices": 10
            },
            "recommendations": [
                f"Error analyzing file: {str(e)}",
                "Ensure proper syntax and formatting in your code."
            ]
        }
EOF
          
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            **.js
            **.jsx
            **.py
            
      - name: Run Carbon Crunch on changed files
        id: analyze
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          mkdir -p ./reports
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Check if file still exists (in case it was deleted)
            if [ -f "$file" ]; then
              file_ext="${file##*.}"
              if [[ "$file_ext" == "js" || "$file_ext" == "jsx" || "$file_ext" == "py" ]]; then
                echo "Analyzing file: $file"
                # Create a Python script to run the analysis
                python -c "
import sys, json, os
sys.path.append('${{ github.workspace }}')
from backend.app.analyzers import analyze_javascript, analyze_python

try:
    file_path = '$file'
    file_ext = '$file_ext'
    
    if file_ext in ['js', 'jsx']:
        result = analyze_javascript(file_path)
    else:
        result = analyze_python(file_path)
        
    # Save results to JSON file
    with open(os.path.join('./reports', os.path.basename(file_path) + '.json'), 'w') as f:
        json.dump(result, f)
        
    # Print success message
    print(f'Successfully analyzed {file_path}')
    
except Exception as e:
    print(f'Error analyzing {file_path}: {str(e)}')
    # Create a basic error report
    error_report = {
        'overall_score': 0,
        'breakdown': {
            'naming': 0,
            'modularity': 0,
            'comments': 0,
            'formatting': 0,
            'reusability': 0,
            'best_practices': 0
        },
        'recommendations': [
            f'Error analyzing file: {str(e)}',
            'Please check file syntax and formatting.'
        ]
    }
    with open(os.path.join('./reports', os.path.basename(file_path) + '.json'), 'w') as f:
        json.dump(error_report, f)
"
              fi
            fi
          done
          
          # Create empty report if none were generated
          if [ ! "$(ls -A ./reports)" ]; then
            echo '{"overall_score": 0, "breakdown": {"naming": 0, "modularity": 0, "comments": 0, "formatting": 0, "reusability": 0, "best_practices": 0}, "recommendations": ["No files were analyzed."]}' > ./reports/no_files.json
          fi
          
          echo "summary=Reports generated in ./reports/" >> $GITHUB_OUTPUT
          
      - name: Create summary
        run: |
          echo "## Carbon Crunch Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if reports directory exists and has files
          if [ -d "./reports" ] && [ "$(ls -A ./reports)" ]; then
            # Install jq if needed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi
            
            # Loop through all JSON reports and create a summary
            for report in ./reports/*.json; do
              if [ -f "$report" ]; then
                filename=$(basename "$report" .json)
                echo "### File: $filename" >> $GITHUB_STEP_SUMMARY
                
                # Extract score and recommendations
                score=$(jq -r '.overall_score' "$report")
                echo "**Overall Score:** $score / 100" >> $GITHUB_STEP_SUMMARY
                
                echo "**Breakdown:**" >> $GITHUB_STEP_SUMMARY
                jq -r '.breakdown | to_entries[] | "- \(.key): \(.value)"' "$report" >> $GITHUB_STEP_SUMMARY
                
                echo "**Recommendations:**" >> $GITHUB_STEP_SUMMARY
                jq -r '.recommendations[]' "$report" | while read -r line; do
                  echo "- $line" >> $GITHUB_STEP_SUMMARY
                done
                
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No reports were generated." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Add PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Make sure reports directory exists
            const reportsDir = path.join(process.env.GITHUB_WORKSPACE, 'reports');
            if (!fs.existsSync(reportsDir)) {
              console.log('Reports directory does not exist');
              return;
            }
            
            // Read all report files
            const files = fs.readdirSync(reportsDir).filter(f => f.endsWith('.json'));
            
            if (files.length === 0) {
              console.log('No report files found');
              return;
            }
            
            let comment = '## Carbon Crunch Code Quality Analysis\n\n';
            
            // Process each report file
            for (const file of files) {
              const reportPath = path.join(reportsDir, file);
              const reportContent = fs.readFileSync(reportPath, 'utf8');
              const report = JSON.parse(reportContent);
              
              const filename = file.replace('.json', '');
              comment += `### File: ${filename}\n`;
              
              // Add emoji based on score
              let scoreEmoji = '🔴';
              if (report.overall_score >= 80) scoreEmoji = '🟢';
              else if (report.overall_score >= 60) scoreEmoji = '🟡';
              
              comment += `**Overall Score:** ${scoreEmoji} ${report.overall_score}/100\n\n`;
              
              // Add breakdown
              comment += '**Score Breakdown:**\n';
              Object.entries(report.breakdown).forEach(([category, score]) => {
                // Format category name
                const categoryName = category
                  .replace(/_/g, ' ')
                  .replace(/\b\w/g, l => l.toUpperCase());
                
                comment += `- ${categoryName}: ${score}\n`;
              });
              
              // Add recommendations
              if (report.recommendations && report.recommendations.length > 0) {
                comment += '\n**Recommendations:**\n';
                report.recommendations.forEach(rec => {
                  comment += `- ${rec}\n`;
                });
              }
              
              comment += '\n---\n\n';
            }
            
            comment += 'Generated by Carbon Crunch 🌱';
            
            // Post comment on PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 